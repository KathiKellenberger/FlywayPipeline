# This is a basic workflow to help you get started with Actions
 
name: Example GitHub Pipeline (Self-Hosted)
 
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "release" branch
  
    #branches:
      #- release
      #- 'migrations/**'
 
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
 
env:
 
  FLYWAY_LICENSE_KEY: ${{ secrets.FLYWAY_LICENSE_KEY }} #Repository Secret - Create this within the Projects Settings > Secrects > Actions section
  # If the first undo script is U002, this will validate all undo scripts up to and including that
  FIRST_UNDO_SCRIPT: ${{ secrets.FIRST_UNDO_SCRIPT }}
  # Enable this for additional debug logging
  ACTIONS_RUNNER_DEBUG: true 
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Deploy Build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: 'build' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured 
    env:
      stage: 'Build'
      # Environment Secrets - Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
      databaseName: ${{ secrets.databaseName}} 
      JDBC: ${{ secrets.JDBC }} 
      userName: ${{ secrets.userName }}
      password: ${{ secrets.password }}
      # End of Environment Secrets #
      displayName: 'Build'
      executeBuild: false
      publishArtifacts: true
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Install Flyway
        if: env.executeBuild == 'true'
        run: |
         "wget -qO- https://download.red-gate.com/maven/release/org/flywaydb/enterprise/flyway-commandline/9.15.1/flyway-commandline-9.15.1-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-9.15.1/flyway /usr/local/bin"
      
      - name: show contents
        run: ls ${{ GITHUB.WORKSPACE }}
      # Runs the Flyway Clean command against the Build database
      - name: Clean Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}/flyway.conf" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" info clean info -url="${{ env.JDBC }}" -cleanDisabled='false'
        
      # Runs the Flyway Migrate command against the Build database
      - name: Migrate Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}/flyway.conf" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" info migrate info -url="${{ env.JDBC }}" -cleanDisabled='false'
          
      # Runs the Flyway Undo command against the Build database
      - name: undo Build DB
        if: env.executeBuild == 'true'
        run: |
          flyway -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}/flyway.conf" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" info undo info -url="${{ env.JDBC }}" -cleanDisabled='false' -target="${{ env.FIRST_UNDO_SCRIPT }}"
 
       # Create a directory to stage the artifact files
      - name: Stage files for publishing
        if: env.publishArtifacts == 'true'
        run: |
          cp -R ${{ GITHUB.WORKSPACE }}/migrations ${{ GITHUB.WORKSPACE }}/Artifact_Files/
 
      
      #After migration scripts are validated, publish them as an artifact
      - name: Publish Validated Migration Scripts as Artifact
        if: env.publishArtifacts == 'true'
        uses: actions/upload-artifact@v3.1.1
        with: 
          name: flyway-build-artifact
          path: ${{ GITHUB.WORKSPACE }}/Artifact_Files/Migration/
 
  prod-deployment:
      name: Production Deployment Preparation - Report Creation
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      environment: 'prod' #Ensure this environment name is setup in the projects Settings>Environment area. Ensuring any reviewers are also configured
      if: ${{ true }} #Set this variable to false to temporarily disable the job
      needs: build
      env:
        stage: 'Prod'
        # Environment Secrets - Ensure all of the below have been created as an Environment Secret (Projects Settings > Secrets > Actions section, specially related to the environment in question) #
        databaseName: ${{ vars.databaseName}}
        JDBC: ${{ secrets.JDBC }}
        userName: ${{ secrets.userName }}
        password: ${{ secrets.password }}
        check_JDBC: ${{ secrets.check_JDBC }} 
        check_userName: ${{ secrets.check_userName }}
        check_password: ${{ secrets.check_password }}  
        # End of Environment Secrets #
        generateDriftAndChangeReport: true
        failReleaseIfDriftDetected: false
        staticCodeAnalysis: false #Currently not setup in this pipeline
        publishArtifacts: true
        pauseForCodeReview: true
 
      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3
       
        - name: Install Flyway
          run: "wget -qO- https://download.red-gate.com/maven/release/org/flywaydb/enterprise/flyway-commandline/9.15.1/flyway-commandline-9.15.1-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-9.15.1/flyway /usr/local/bin"
          
        # Runs the Flyway Check command, to produce a deployment report, against the Production database
        # - name: Create Reports directory
        #   run: mkdir ${{ GITHUB.WORKSPACE }}/reports
          
         
        - name: Create Check Reports
          if: env.generateDriftAndChangeReport == 'true'
          run: |
            flyway -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}/flyway.conf" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" check -dryrun -changes -drift "-check.failOnDrift=${{ env.failReleaseIfDriftDetected }}" "-check.buildUrl=${{ env.check_JDBC }}" "-check.buildUser=${{ env.check_userName }}" "-check.buildPassword=${{ env.check_password }}" -url="${{ env.JDBC }}" "-check.reportFilename=${{ GITHUB.WORKSPACE }}/reports/${{ env.databaseName }}-Run-${{ GITHUB.RUN_ID }}-Check-Report.html"
          continue-on-error: false
          
        -name: show report directory
          run: echo "list of files in reports folder"
          run: ls ${{ GITHUB.WORKSPACE }}/reports
 
         # Create a directory to stage the artifact files
        - name: Stage files for publishing
          if: env.publishArtifacts == 'true'
          run: |
            cp -R ${{ GITHUB.WORKSPACE }}/reports ${{ GITHUB.WORKSPACE }}/Artifact_Files/
 
        - name: Publish Check Report as Artifact
          uses: actions/upload-artifact@v2
          with: 
            name: flyway-reports
            path: ${{ GITHUB.WORKSPACE }}/Artifact_Files/Reports/
 
        - name: Migrate Prod DB
          run: |
            flyway -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}/flyway.conf" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" info migrate info -url="${{ env.JDBC }}" -cleanDisabled='true' 
          
  # prod:
  #   name: Deploy Production
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   environment: 'prod' #Ensure this environment name is setup in     # Runs the Flyway Migrate against the Production database
    #   if: ${{ true }} #Set this variable to false to temporarily disable the job
  #   needs: prod-preparation
  #   env:
  #     stage: 'Prod'
  #     databaseName: ${{ secrets.databaseName}}
  #     JDBC: ${{ secrets.JDBC }}
  #     userName: ${{ secrets.userName }}
  #     password: ${{ secrets.password }}
  #     pauseForCodeReview: true
 
  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v3
     
  #     - name: Install Flyway
  #       run: |
  #        "wget -qO- https://download.red-gate.com/maven/release/org/flywaydb/enterprise/flyway-commandline/9.15.1/flyway-commandline-9.15.1-linux-x64.tar.gz | tar -xvz && sudo ln -s `pwd`/flyway-9.15.1/flyway /usr/local/bin"
   
        # - name: Migrate Build DB
        #   run: |
        #     flyway -user="${{ env.userName }}" -password="${{ env.password }}" -baselineOnMigrate="true" -licenseKey="${{ env.FLYWAY_LICENSE_KEY }}" -configFiles="${{ GITHUB.WORKSPACE }}/flyway.conf" -locations="filesystem:${{ GITHUB.WORKSPACE }}/migrations" info migrate info -url="${{ env.JDBC }}" -cleanDisabled='true' 

   